import * as React from "react";
import Head from "next/head";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Grid from "@mui/material/Grid";
import Box from "@mui/material/Box";
import BasicSelect from "../components/Select/BasicSelect";
import ImageIcon from "@mui/icons-material/Image";
import CategoryTab from "../components/CategoryTab";
import DatePick from "../components/DatePick";
import dayjs from 'dayjs';
import axios from "../utils/axios";
import { TimePicker } from '@mui/x-date-pickers/TimePicker';
import https from "https";
import { Paper, Snackbar } from "@mui/material";
import Alert from "@mui/material/Alert";

const baseUrl = process.env.NEXT_PUBLIC_BASE_URL

export async function getServerSideProps  (request, response) {
  
  const res = await fetch (`${baseUrl}/category`)
    if (!res.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
  const data = await res.json()
  
  

  return {
    props: {
      categoriesData: data.data,
      monthExpense: 0
    }
  }
}

export default function Home({categoriesData, monthExpense}) {
  //const theme = useTheme();
  const [name, setName] = React.useState("")
  const [category, setCategory] = React.useState(3)
  const [subcategory, setSubcategory] = React.useState(1)
  const [account, setAccount] = React.useState(2)
  const [time, setTime] = React.useState(dayjs())
  const [price, setPrice] = React.useState(0)
  const [categories, setCategories] = React.useState([]);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState(null);
  const [file, setFile] = React.useState(null)
  const [previewUrl, setPreviewUrl] = React.useState(null);
  const [open, setOpen] = React.useState(false)
  const [alertMessage, setAlertMessage] = React.useState("")
 
  const [monthIncome, setMonthIncome] = React.useState(0)
  const fileInputRef = React.useRef(null);
  const handleClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }

    setOpen(false);
  };
  

  const handleUpload = async (e) => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  }

  const handleSubmit = async (e) => {
    let data = {
      name,
      categoryId: category,
      subcategoryId: subcategory,
      accountId: account,
      dateTime: time.format(),
      price
    }


    if (file) {
      const formData = new FormData();
      formData.append('files', file);
      try {
        const imgUploadResponse = await axios.post(process.env.NEXT_PUBLIC_BASE_URL + '/image', formData)
        if (imgUploadResponse.request?.status === 200) {
          const imageId = imgUploadResponse.data.path
          data = { ...data, imageId }
        }

        
      } catch (error) {
        console.error(error)
        setAlertMessage("圖片上傳失敗")
          setOpen(true)
      }
    }

    try {
      const response = await axios.post(`${baseUrl}/expense`, data)
        console.log(response)
        if(response.status === 201) {
          setAlertMessage("上傳成功")
          setOpen(true)
        }

    } catch (err) {
      console.log(err)
      setAlertMessage("上傳失敗")
          setOpen(true)
    }

  }

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    console.log(file)
    if (file && file.type.startsWith('image/')) {

      if (previewUrl) {
        URL.revokeObjectURL(previewUrl);
      }

      const imageUrl = URL.createObjectURL(file);
      setPreviewUrl(imageUrl);
      setFile(file)
    }
  };

  return (
    <>
      <Head>
        <title>My App</title>
        <meta name="description" content="Generated by create-next-app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box sx={{ display: 'flex',  alignItems: 'center', padding: 2 }}>
      <Grid
        container
        spacing={1}
        padding={1}
        flexGrow={1}
        maxWidth="sm"
        sx={{ width: "100%" }}
      >
        <Grid
          size={12}
          item
          container
          direction="row"
          sx={{
            justifyConten: "space-between",
            alignItems: "center",
          }}
        >
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              width: "100%",
            }}
          >
            <Button variant="contained" color="error">
              取消
            </Button>
            <Button variant="contained" onClick={handleSubmit}>新增</Button>
          </Box>
        </Grid>

        <Grid size={12} item>
          <CategoryTab data={categoriesData} category={category} setCategory={setCategory} reason={subcategory} setReason={setSubcategory} />
        </Grid>

        <Grid size={12} item>
          <TextField
            id="outlined-basic"
            label="名稱"
            variant="outlined"
            fullWidth
            value={name}
            onChange={(e) => {
              e.preventDefault
              setName(e.target.value)
            }}
          />
        </Grid>
        <Grid size={12} item>
          <TextField
            id="outlined-basic"
            label="費用"
            variant="outlined"
            fullWidth
            value={price}
            onChange={(e) => {
              e.preventDefault
              setPrice(e.target.value)
            }}
          />
        </Grid>
        <Grid size={6} item>

          <Button
            variant="outlined"
            startIcon={!previewUrl && <ImageIcon />}
            sx={{ width: "100%", height: "100%", textTransform: "none" }}
            onClick={handleUpload}
          >
            {previewUrl ? (
              <img
                src={previewUrl}
                alt="預覽圖片"
                style={{
                  height: '100%',
                  maxHeight: '50px',
                  objectFit: 'contain'
                }}
              />
            ) : (
              '上傳照片'
            )}
          </Button>
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            style={{ display: 'none' }}
            onChange={handleFileChange}
          />
        </Grid>
        <Grid item container size={6} rowSpacing={1} columnSpacing={1}>
          <Grid size={12} item>
            <BasicSelect account={account} setAcount={setAccount} />
          </Grid>
          <Grid size={12} item>
            <DatePick time={time} setTime={setTime} />
          </Grid>
          <Grid size={12}>

          </Grid>
        </Grid>

        <Grid size={12} item>
          <TextField
            id="outlined-multiline-static"
            label="備註"
            multiline
            rows={3}
            defaultValue="備註"
            fullWidth
          />
        </Grid>
      </Grid>
      <Grid container spacing={2} sx={{ marginTop: 2, width: "100%" }}>
        <Grid size={12} container>
          <Grid item size={6}>
            <Paper elevation={3} sx={{ height: '100%', justifyContent: 'center', display: 'flex', alignItems: 'center' }}>
              本月支出: {monthExpense} 元
            </Paper>
          </Grid>
          <Grid item size={6}>
            <Paper elevation={3} sx={{ height: '100%', justifyContent: 'center', display: 'flex', alignItems: 'center' }}>
              本月收入
            </Paper>
          </Grid>
        </Grid>
        <Grid>
            <Paper elevation={3} sx={{ height: '100%', justifyContent: 'center', display: 'flex', alignItems: 'center' }}>
              今日支出
              
              </Paper>
        </Grid>
      </Grid>
      </Box>
      <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={open} autoHideDuration={6000} onClose={handleClose}>
        <Alert
          onClose={handleClose}
          severity="success"
          variant="filled"
          sx={{ width: '100%' }}
        >
          {alertMessage}
        </Alert>
      </Snackbar>
    </>
  );
}
